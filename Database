/**
 *
 */


import java.io.Serializable;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



@SuppressWarnings("unused")
public final class Database implements Serializable {

    /**
     *
     */

    private static Database _db;
    /**
     *
     */
    private Connection _con = null;

    /**
     *
     */
    private ResultSet _rs;

    /**
     *
     */
    private CallableStatement _cs;

    /**
     *
     */
    private PreparedStatement _ps;

    /**
     *
     */
    private DatabaseMetaData _dbmeta;

    /**
     *
     */
    private ResultSetMetaData _rsmeta;

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    /**
     *
     */
    public Database() {
        if (_con == null) {
            try {
                Class.forName("org.mariadb.jdbc.Driver");
                _con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/gldb", "root", "");
                _dbmeta = _con.getMetaData();
            } catch (SQLException | ClassNotFoundException e) {
            }
        }
    }

  

    /**
     *
     * @return
     */
    public static Database getInstance() {
        if (_db == null) {
            _db = new Database();
        }
        return _db;
    }

    /**
     *
     * @param arg0
     * @return
     */
    public synchronized ResultSet doQuery(String arg0) {
        try {
            _ps = _con.prepareStatement(arg0);
            _rs = _ps.executeQuery();
            _rsmeta = _rs.getMetaData();
        } catch (SQLException e) {
        }
        return _rs;
    }

    /**
     * @param arg0
     * @return
     * @throws SQLException
     */
    public synchronized ResultSet doCall(String arg0) throws SQLException {
        try {
            _cs = _con.prepareCall(arg0);
            _rs = _ps.executeQuery();
            _rsmeta = _rs.getMetaData();
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }
        return _rs;
    }

    public synchronized void loadTable(String arg0,JTable t, String... objects) throws SQLException {
    try{
    DefaultTableModel modT = new DefaultTableModel();
    for(String s:objects){
            modT.addColumn(s);
    }
    ResultSet r = this.doQuery(arg0);
    Vector v;
    while(r.next()){
        v=new Vector();
         for(int i=1;i<=objects.length;i++){
         v.add(r.getString(i));
         }
         modT.addRow(v);
    }
    t.setModel(modT);
    
    }catch(SQLException e){
     throw new SQLException(e.getMessage());
    }
    
    }
    public synchronized ResultSet doQuery(String arg0, Object... objects) throws SQLException {
        try {
            _ps = _con.prepareStatement(arg0);
            for (int i = 0; i < objects.length; i++) {
                _ps.setObject(i + 1, objects[i]);
            }
            _rs = _ps.executeQuery();
            _rsmeta = _rs.getMetaData();
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }
        return _rs;
    }
public void remplCombo(String req,JComboBox  box){
  box.removeAllItems();
			Statement stmt;
		
		    try {
	stmt = _con.createStatement();
	 _rs = stmt.executeQuery(req);
	while(_rs.next()){
	box.addItem(_rs.getString(1));     
/* le nom du jComboBox est jComboName et  <indexe de la colonne > est l'indexe de la colonne dont vous voulez afficher dans le combobox ,elle peut prendre l'une des valeurs 1,2 . . */ 
		}
		_rs.close();
	} catch (SQLException e) {
	e.printStackTrace();
		}
}
    public synchronized ResultSet doCall(String arg0, Object... objects) throws SQLException {
        try {
            _cs = _con.prepareCall(arg0);
            for (int i = 0; i < objects.length; i++) {
                _cs.setObject(i + 1, objects[i]);
            }
            _rs = _cs.executeQuery();
            _rsmeta = _rs.getMetaData();
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }
        return _rs;
    }

    public synchronized boolean doNonQuery(String arg0) throws SQLException {
        try {
            _ps = _con.prepareStatement(arg0);
            _ps.execute();
            return true;
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }
    }

    public synchronized boolean doNonQuery(String arg0, Object... objects) throws SQLException {
        try {
            _ps = _con.prepareStatement(arg0);
            for (int i = 0; i < objects.length; i++) {
                _ps.setObject(i + 1, objects[i]);
            }
            _ps.execute();
            return true;
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }
    }

    public synchronized Connection getConnection() {
        return _con;
    }

    public synchronized void setConnection(Connection _con) {
        this._con = _con;
    }

    @Override
    protected void finalize() throws Throwable {
        try {
            _rs.close();
            _ps.close();
            _cs.close();
            _con.close();
            super.finalize();
        } catch (SQLException e) {
            throw new SQLException(e.getMessage());
        }

    }
    }
